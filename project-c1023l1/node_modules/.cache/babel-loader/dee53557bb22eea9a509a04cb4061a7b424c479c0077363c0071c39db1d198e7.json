{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\n// URL của API backend\nconst API_URL = \"http://localhost:8080/api\";\n\n// Hàm gọi API để lấy danh sách người dùng theo phân trang\nexport const getUsers = async (token, page = 0, size = 5) => {\n  try {\n    const response = await axios.get(`${API_URL}/users/pagination?page=${page}&size=${size}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data; // Trả về đối tượng phân trang\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    throw error;\n  }\n};\n// Hàm kiểm tra xem tên đăng nhập có tồn tại không\nexport const checkUsernameExists = async (username, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/users`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const usernames = response.data.map(user => user.username); // Lấy danh sách tên đăng nhập\n\n    return usernames.includes(username); // Kiểm tra xem tên đăng nhập có trong danh sách không\n  } catch (error) {\n    console.error(\"Error checking username existence:\", error);\n    // Trả về false để không có lỗi nếu có lỗi xảy ra\n    return false;\n  }\n};\n\n// Hàm gọi API để thêm mới nhân viên\nexport const saveEmployeeToAPI = async (values, token) => {\n  // Đổi tên hàm này\n  try {\n    const response = await axios.post(`${API_URL}/users`, values, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status === 201) {\n      toast.success(\"Thêm mới nhân viên thành công!\");\n      return response.data;\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(\"Error adding employee:\", error);\n    toast.error(\"Lỗi khi thêm mới nhân viên: \" + ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n    throw error;\n  }\n};\n// Hàm gọi API để tìm kiếm người dùng\nexport const searchUsers = async (userName, fullName, numberPhone, token, page = 0, size = 5) => {\n  try {\n    const response = await axios.get(`${API_URL}/users/search`, {\n      params: {\n        userName,\n        fullName,\n        numberPhone,\n        page,\n        size\n      },\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data; // Trả về đối tượng phân trang\n  } catch (error) {\n    console.error(\"Error searching users:\", error);\n    throw error;\n  }\n};\nexport const updateUser = async (userId, userData, token) => {\n  const response = await axios.put(`${API_URL}/users/${userId}`, userData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.data;\n};\n// Hàm gọi API để lấy thông tin người dùng theo ID\nexport const getUserById = async (userId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/users/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data; // Trả về thông tin người dùng\n  } catch (error) {\n    console.error(\"Error fetching user by ID:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","toast","API_URL","getUsers","token","page","size","response","get","headers","Authorization","data","error","console","checkUsernameExists","username","usernames","map","user","includes","saveEmployeeToAPI","values","post","status","success","_error$response","_error$response$data","message","searchUsers","userName","fullName","numberPhone","params","updateUser","userId","userData","put","getUserById"],"sources":["E:/Codegym/C0823I1/Manager_cf/C1023L1-FE/project-c1023l1/src/Service/UserService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// URL của API backend\r\nconst API_URL = \"http://localhost:8080/api\";\r\n\r\n// Hàm gọi API để lấy danh sách người dùng theo phân trang\r\nexport const getUsers = async (token, page = 0, size = 5) => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/users/pagination?page=${page}&size=${size}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        return response.data; // Trả về đối tượng phân trang\r\n    } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n        throw error;\r\n    }\r\n};\r\n// Hàm kiểm tra xem tên đăng nhập có tồn tại không\r\nexport const checkUsernameExists = async (username, token) => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/users`, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        const usernames = response.data.map(user => user.username); // Lấy danh sách tên đăng nhập\r\n\r\n        return usernames.includes(username); // Kiểm tra xem tên đăng nhập có trong danh sách không\r\n    } catch (error) {\r\n        console.error(\"Error checking username existence:\", error);\r\n        // Trả về false để không có lỗi nếu có lỗi xảy ra\r\n        return false;\r\n    }\r\n};\r\n\r\n// Hàm gọi API để thêm mới nhân viên\r\nexport const saveEmployeeToAPI = async (values, token) => { // Đổi tên hàm này\r\n    try {\r\n        const response = await axios.post(`${API_URL}/users`, values, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (response.status === 201) {\r\n            toast.success(\"Thêm mới nhân viên thành công!\");\r\n            return response.data;\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error adding employee:\", error);\r\n        toast.error(\"Lỗi khi thêm mới nhân viên: \" + error.response?.data?.message || error.message);\r\n        throw error;\r\n    }\r\n};\r\n// Hàm gọi API để tìm kiếm người dùng\r\nexport const searchUsers = async (userName, fullName, numberPhone, token, page = 0, size = 5) => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/users/search`, {\r\n            params: {\r\n                userName,\r\n                fullName,\r\n                numberPhone,\r\n                page,\r\n                size,\r\n            },\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        return response.data; // Trả về đối tượng phân trang\r\n    } catch (error) {\r\n        console.error(\"Error searching users:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\nexport const updateUser = async (userId, userData, token) => {\r\n    const response = await axios.put(`${API_URL}/users/${userId}`, userData, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    });\r\n    return response.data;\r\n};\r\n// Hàm gọi API để lấy thông tin người dùng theo ID\r\nexport const getUserById = async (userId, token) => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/users/${userId}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        return response.data; // Trả về thông tin người dùng\r\n    } catch (error) {\r\n        console.error(\"Error fetching user by ID:\", error);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}