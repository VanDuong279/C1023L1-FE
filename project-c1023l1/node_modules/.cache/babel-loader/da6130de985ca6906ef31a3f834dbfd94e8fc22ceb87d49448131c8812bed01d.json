{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\n// URL của API backend\nconst API_URL = \"http://localhost:8080/api\";\n\n// Hàm gọi API để lấy danh sách người dùng theo phân trang và tìm kiếm\nexport const getUsers = async (token, page = 0, size = 2, username = \"\", fullName = \"\", numberPhone = \"\") => {\n  try {\n    const response = await axios.get(`${API_URL}/users/pagination`, {\n      params: {\n        page,\n        size,\n        useName: username,\n        fullName,\n        numberPhone\n      },\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data; // Trả về đối tượng phân trang\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    throw error;\n  }\n};\n\n// Hàm kiểm tra xem tên đăng nhập có tồn tại không\nexport const checkUsernameExists = async (username, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/users`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const usernames = response.data.map(user => user.username); // Lấy danh sách tên đăng nhập\n\n    return usernames.includes(username); // Kiểm tra xem tên đăng nhập có trong danh sách không\n  } catch (error) {\n    console.error(\"Error checking username existence:\", error);\n    // Trả về false để không có lỗi nếu có lỗi xảy ra\n    return false;\n  }\n};\n\n// Hàm gọi API để thêm mới nhân viên\nexport const saveEmployeeToAPI = async (values, token) => {\n  // Đổi tên hàm này\n  try {\n    const response = await axios.post(`${API_URL}/users`, values, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status === 201) {\n      toast.success(\"Thêm mới nhân viên thành công!\");\n      return response.data;\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(\"Error adding employee:\", error);\n    toast.error(\"Lỗi khi thêm mới nhân viên: \" + ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","toast","API_URL","getUsers","token","page","size","username","fullName","numberPhone","response","get","params","useName","headers","Authorization","data","error","console","checkUsernameExists","usernames","map","user","includes","saveEmployeeToAPI","values","post","status","success","_error$response","_error$response$data","message"],"sources":["E:/Codegym/C0823I1/Manager_cf/C1023L1-FE/project-c1023l1/src/Service/UserService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// URL của API backend\r\nconst API_URL = \"http://localhost:8080/api\";\r\n\r\n// Hàm gọi API để lấy danh sách người dùng theo phân trang và tìm kiếm\r\nexport const getUsers = async (token, page = 0, size = 2, username = \"\", fullName = \"\", numberPhone = \"\") => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/users/pagination`, {\r\n            params: {\r\n                page,\r\n                size,\r\n                useName: username,\r\n                fullName,\r\n                numberPhone,\r\n            },\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        return response.data; // Trả về đối tượng phân trang\r\n    } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Hàm kiểm tra xem tên đăng nhập có tồn tại không\r\nexport const checkUsernameExists = async (username, token) => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/users`, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        const usernames = response.data.map(user => user.username); // Lấy danh sách tên đăng nhập\r\n\r\n        return usernames.includes(username); // Kiểm tra xem tên đăng nhập có trong danh sách không\r\n    } catch (error) {\r\n        console.error(\"Error checking username existence:\", error);\r\n        // Trả về false để không có lỗi nếu có lỗi xảy ra\r\n        return false;\r\n    }\r\n};\r\n\r\n// Hàm gọi API để thêm mới nhân viên\r\nexport const saveEmployeeToAPI = async (values, token) => { // Đổi tên hàm này\r\n    try {\r\n        const response = await axios.post(`${API_URL}/users`, values, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (response.status === 201) {\r\n            toast.success(\"Thêm mới nhân viên thành công!\");\r\n            return response.data;\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error adding employee:\", error);\r\n        toast.error(\"Lỗi khi thêm mới nhân viên: \" + error.response?.data?.message || error.message);\r\n        throw error;\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,KAAK,EAAEC,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,CAAC,EAAEC,QAAQ,GAAG,EAAE,EAAEC,QAAQ,GAAG,EAAE,EAAEC,WAAW,GAAG,EAAE,KAAK;EACzG,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGT,OAAO,mBAAmB,EAAE;MAC5DU,MAAM,EAAE;QACJP,IAAI;QACJC,IAAI;QACJO,OAAO,EAAEN,QAAQ;QACjBC,QAAQ;QACRC;MACJ,CAAC;MACDK,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUX,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOM,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,mBAAmB,GAAG,MAAAA,CAAOZ,QAAQ,EAAEH,KAAK,KAAK;EAC1D,IAAI;IACA,MAAMM,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGT,OAAO,QAAQ,EAAE;MACjDY,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUX,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,MAAMgB,SAAS,GAAGV,QAAQ,CAACM,IAAI,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACf,QAAQ,CAAC,CAAC,CAAC;;IAE5D,OAAOa,SAAS,CAACG,QAAQ,CAAChB,QAAQ,CAAC,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D;IACA,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAG,MAAAA,CAAOC,MAAM,EAAErB,KAAK,KAAK;EAAE;EACxD,IAAI;IACA,MAAMM,QAAQ,GAAG,MAAMV,KAAK,CAAC0B,IAAI,CAAC,GAAGxB,OAAO,QAAQ,EAAEuB,MAAM,EAAE;MAC1DX,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUX,KAAK;MAClC;IACJ,CAAC,CAAC;IAEF,IAAIM,QAAQ,CAACiB,MAAM,KAAK,GAAG,EAAE;MACzB1B,KAAK,CAAC2B,OAAO,CAAC,gCAAgC,CAAC;MAC/C,OAAOlB,QAAQ,CAACM,IAAI;IACxB;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAY,eAAA,EAAAC,oBAAA;IACZZ,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9ChB,KAAK,CAACgB,KAAK,CAAC,8BAA8B,KAAAY,eAAA,GAAGZ,KAAK,CAACP,QAAQ,cAAAmB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBb,IAAI,cAAAc,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAId,KAAK,CAACc,OAAO,CAAC;IAC5F,MAAMd,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}